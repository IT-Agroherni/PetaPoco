<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="EnvDTE"#>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.10.0"#>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop "#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text"#>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#+ 
/*
   This software is supplied "AS IS". The authors disclaim all warranties, 
   expressed or implied, including, without limitation, the warranties of 
   merchantability and of fitness for any purpose. The authors assume no
   liability for direct, indirect, incidental, special, exemplary, or
   consequential damages, which may result from the use of this software,
   even if advised of the possibility of such damage.

The TemplateFileManager is based on EntityFrameworkTemplateFileManager (EFTFM) from MS.

Differences to EFTFM
Version 2.2.1
- added Namespace to ParameterTemplate Engine in GetTemplateContent (better Compatibility with Solution2 (EnvDte80))
- sample templates removed from nuget-package, use nuget package t4.samples instead
- trailing spaces removed
Version 2.1.3
- Bugfix Exception when solution contains database-projects
Version 2.1.2
- Bugfix Exception when solution contains wix-projects, reported by jturner
Version 2.1:
- Replace Enum BuildAction with class for more flexibility
Version 2:
- StartHeader works with Parameter $filename$
- StartNewFile has a new named parameter FileProperties
  - Support for:
   - BuildAction
   - CustomTool
   - user defined parameter for using in StartHeader-Block
- Property IsAutoIndentEnabled for support Format Document (C#, VB) when set to true

Version: 1.1
Add method WriteLineToBuildPane, WriteToBuildPane

Version 1:
- StartNewFile with named parameters projectName and folderName for generating files to different locations.
- Property CanOverrideExistingFile, to define whether existing files are can overwritten
- Property Encoding Encode type for output files.
*/

/// <summary>
/// Responsible for marking the various sections of the generation,
/// so they can be split up into separate files and projects
/// </summary>
/// <author>R. Leupold</author>
public class TemplateFileManager
{
    private readonly ProjectItem templateProjectItem;
    private readonly Action<string> checkOutAction;
    private readonly Action<IEnumerable<OutputFile>> projectSyncAction;
    private readonly DTE dte;
    private readonly List<string> templatePlaceholderList = new List<string>();

    /// <summary>
    /// Creates files with VS sync
    /// </summary>
    public static TemplateFileManager Create(object textTransformation)
    {
        var transformation = DynamicTextTransformation2.Create(textTransformation);
        return new TemplateFileManager(transformation);
    }

    private readonly List<Block> files = new List<Block>();
    private readonly Block footer = new Block();
    private readonly Block header = new Block();
    private readonly DynamicTextTransformation2 textTransformation;

    // reference to the GenerationEnvironment StringBuilder on the
    // TextTransformation object
    private readonly StringBuilder generationEnvironment;

    private Block currentBlock;

    /// <summary>
    /// Initializes an TemplateFileManager Instance  with the
    /// TextTransformation (T4 generated class) that is currently running
    /// </summary>
    private TemplateFileManager(object textTransformation)
    {
        if (textTransformation == null)
        {
            throw new ArgumentNullException("textTransformation");
        }

        this.textTransformation = DynamicTextTransformation2.Create(textTransformation);
        this.generationEnvironment = this.textTransformation.GenerationEnvironment;

        var hostServiceProvider = this.textTransformation.Host.AsIServiceProvider();
        if (hostServiceProvider == null)
        {
            throw new ArgumentNullException("Could not obtain hostServiceProvider");
        }

        this.dte = (DTE) hostServiceProvider.GetService(typeof(DTE));
        if (this.dte == null)
        {
            throw new ArgumentNullException("Could not obtain DTE from host");
        }

        this.templateProjectItem = this.dte.Solution.FindProjectItem(this.textTransformation.Host.TemplateFile);
        this.CanOverrideExistingFile = true;
        this.IsAutoIndentEnabled = false;
        this.Encoding = Encoding.UTF8;
        this.checkOutAction = fileName => this.dte.SourceControl.CheckOutItem(fileName);
        this.projectSyncAction = keepFileNames => this.ProjectSync(this.templateProjectItem, keepFileNames);
    }

    /// <summary>
    /// If set to false, existing files are not overwritten
    /// </summary>
    /// <returns></returns>
    public bool CanOverrideExistingFile { get; set; }
    public bool CanOverwriteExistingFile { get { return this.CanOverrideExistingFile; } set { this.CanOverrideExistingFile = value;} }

    /// <summary>
    /// If set to true, output files (c#, vb) are formatted based on the vs settings.
    /// </summary>
    /// <returns></returns>
    public bool IsAutoIndentEnabled { get; set; }

    /// <summary>
    /// Defines Encoding format for generated output file. (Default UTF8)
    /// </summary>
    /// <returns></returns>
    public Encoding Encoding { get; set; }

    /// <summary>
    /// Marks the end of the last file if there was one, and starts a new
    /// and marks this point in generation as a new file.
    /// </summary>
    /// <param name="name">Filename</param>
    /// <param name="projectName">Name of the target project for the new file.</param>
    /// <param name="folderName">Name of the target folder for the new file.</param>
    /// <param name="fileProperties">File property settings in vs for the new File</param>
    public void StartNewFile(string name, string projectName = "", string folderName = "", FileProperties fileProperties = null)
    {
        if (string.IsNullOrWhiteSpace(name) == true)
        {
            throw new ArgumentException("name");
        }

        this.CurrentBlock = new Block
                      {
                        Name = name,
                        ProjectName = projectName,
                        FolderName = folderName,
                        FileProperties = fileProperties ?? new FileProperties()
                      };
    }

    public void EndBlock()
    {
        if (this.CurrentBlock == null)
        {
            return;
        }

        this.CurrentBlock.Length = this.generationEnvironment.Length - this.CurrentBlock.Start;

        if (this.CurrentBlock != this.header &&
            this.CurrentBlock != this.footer)
        {
            this.files.Add(this.CurrentBlock);
        }

        this.currentBlock = null;
    }

    /// <summary>
    /// Produce the template output files.
    /// </summary>
    public virtual IEnumerable<OutputFile> Process(bool split = true)
    {
        var list = new List<OutputFile>();

        if (split)
        {
            this.EndBlock();

            var headerText = this.generationEnvironment.ToString(this.header.Start, this.header.Length);
            var footerText = this.generationEnvironment.ToString(this.footer.Start, this.footer.Length);
            this.files.Reverse();

            foreach (var block in this.files)
            {
                var outputPath = VsHelper.GetOutputPath(this.dte, block, Path.GetDirectoryName(this.textTransformation.Host.TemplateFile));
                var fileName = Path.Combine(outputPath, block.Name);
                var content = this.ReplaceParameter(headerText, block) +
                this.generationEnvironment.ToString(block.Start, block.Length) +
                footerText;

                var file = new OutputFile
                   {
                        FileName = fileName,
                        ProjectName = block.ProjectName,
                        FolderName = block.FolderName,
                        FileProperties = block.FileProperties,
                        Content = content
                    };

                this.CreateFile(file);
                this.generationEnvironment.Remove(block.Start, block.Length);

                list.Add(file);
            }
        }

        this.projectSyncAction.EndInvoke(this.projectSyncAction.BeginInvoke(list, null, null));
        this.CleanUpTemplatePlaceholders();
        var items = VsHelper.GetOutputFilesAsProjectItems(this.dte, list);
        this.WriteVsProperties(items, list);

        if (this.IsAutoIndentEnabled == true && split == true)
        {
            this.FormatProjectItems(items);
        }

        this.WriteLog(list);

        return list;
    }

    private void FormatProjectItems(IEnumerable<ProjectItem> items)
    {
        foreach (var item in items)
        {
            this.textTransformation.WriteLine(
            VsHelper.ExecuteVsCommand(this.dte, item, "Edit.FormatDocument")); //, "Edit.RemoveAndSort"));
            this.textTransformation.WriteLine("//-> " + item.Name);
        }
    }

    private void WriteVsProperties(IEnumerable<ProjectItem> items, IEnumerable<OutputFile> outputFiles)
    {
        foreach (var file in outputFiles)
        {
            var item = items.FirstOrDefault(p => p.Name == Path.GetFileName(file.FileName));
            if (item == null) continue;

            if (String.IsNullOrEmpty(file.FileProperties.CustomTool) == false)
            {
                VsHelper.SetPropertyValue(item, "CustomTool", file.FileProperties.CustomTool);
            }

            if (String.IsNullOrEmpty(file.FileProperties.BuildActionString) == false)
            {
                VsHelper.SetPropertyValue(item, "ItemType", file.FileProperties.BuildActionString);
            }
        }
    }

    private string ReplaceParameter(string text, Block block)
    {
        if (String.IsNullOrEmpty(text) == false)
        {
            text = text.Replace("$filename$", block.Name);
        }

        foreach (var item in block.FileProperties.TemplateParameter.AsEnumerable())
        {
            text = text.Replace(item.Key, item.Value);
        }

        return text;
    }

    /// <summary>
    /// Write log to the default output file.
    /// </summary>
    /// <param name="list"></param>
    private void WriteLog(IEnumerable<OutputFile> list)
    {
        this.textTransformation.WriteLine("// Generated helper templates");
        foreach (var item in this.templatePlaceholderList)
        {
            this.textTransformation.WriteLine("// " + this.GetDirectorySolutionRelative(item));
        }

        this.textTransformation.WriteLine("// Generated items");
        foreach (var item in list)
        {
            this.textTransformation.WriteLine("// " + this.GetDirectorySolutionRelative(item.FileName));
        }
    }

    /// <summary>
    /// Removes old template placeholders from the solution.
    /// </summary>
    private void CleanUpTemplatePlaceholders()
    {
        var activeTemplateFullNames = this.templatePlaceholderList.ToArray();
        var allHelperTemplateFullNames = VsHelper.GetAllSolutionItems(this.dte)
            .Where(p => p.Name == VsHelper.GetTemplatePlaceholderName(this.templateProjectItem))
            .Select(p => VsHelper.GetProjectItemFullPath(p))
            .ToArray();

        var delta = allHelperTemplateFullNames.Except(activeTemplateFullNames).ToArray();

        var dirtyHelperTemplates = VsHelper.GetAllSolutionItems(this.dte)
            .Where(p => delta.Contains(VsHelper.GetProjectItemFullPath(p)));

        foreach (var item in dirtyHelperTemplates)
        {
            if (item.ProjectItems != null)
            {
                foreach (ProjectItem subItem in item.ProjectItems)
                {
                    subItem.Remove();
                }
            }

            item.Remove();
        }
    }

    /// <summary>
    /// Gets a list of helper templates from the log.
    /// </summary>
    /// <returns>List of generated helper templates.</returns>
    private string[] GetPreviousTemplatePlaceholdersFromLog()
    {
        var path = Path.GetDirectoryName(this.textTransformation.Host.ResolvePath(this.textTransformation.Host.TemplateFile));
        var file1 = Path.GetFileNameWithoutExtension(this.textTransformation.Host.TemplateFile) + ".txt";
        var contentPrevious = File.ReadAllText(Path.Combine(path, file1));

        var result = contentPrevious
              .Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
              .Select(x => x.Split(new[] { "=>" }, StringSplitOptions.RemoveEmptyEntries).First())
              .Select(x => Regex.Replace(x, "//", String.Empty).Trim())
              .Where(x => x.EndsWith(VsHelper.GetTemplatePlaceholderName(this.templateProjectItem)))
              .ToArray();

        return result;
    }

    private string GetDirectorySolutionRelative(string fullName)
    {
        var slnPos = fullName.IndexOf(Path.GetFileNameWithoutExtension(this.dte.Solution.FileName), StringComparison.Ordinal);
        if (slnPos < 0)
        {
            slnPos = 0;
        }

        return fullName.Substring(slnPos);
    }

    protected virtual void CreateFile(OutputFile file)
    {
        if (this.CanOverrideExistingFile == false && File.Exists(file.FileName) == true)
        {
            return;
        }

        if (this.IsFileContentDifferent(file))
        {
            this.CheckoutFileIfRequired(file.FileName);
            File.WriteAllText(file.FileName, file.Content, this.Encoding);
        }
    }

    protected bool IsFileContentDifferent(OutputFile file)
    {
        return !(File.Exists(file.FileName) && File.ReadAllText(file.FileName) == file.Content);
    }

    private Block CurrentBlock
    {
        get { return this.currentBlock; }
        set
        {
            if (this.CurrentBlock != null)
            {
                this.EndBlock();
            }

            if (value != null)
            {
                value.Start = this.generationEnvironment.Length;
            }

            this.currentBlock = value;
        }
    }

    private void ProjectSync(ProjectItem templateProjectItem, IEnumerable<OutputFile> keepFileNames)
    {
        var groupedFileNames = from f in keepFileNames
                                group f by new { f.ProjectName, f.FolderName }
                                into l
                                select new {
                                    ProjectName = l.Key.ProjectName,
                                    FolderName = l.Key.FolderName,
                                    FirstItem = l.First(),
                                    OutputFiles = l
                                };

        this.templatePlaceholderList.Clear();

        foreach (var item in groupedFileNames)
        {
            var pi = VsHelper.GetTemplateProjectItem(templateProjectItem.DTE, item.FirstItem, templateProjectItem);
            ProjectSyncPart(pi, item.OutputFiles);

            if (pi.Name.EndsWith("txt4"))
                this.templatePlaceholderList.Add(VsHelper.GetProjectItemFullPath(pi));
        }

        // clean up
        var hasDefaultItems = groupedFileNames.Where(f => String.IsNullOrEmpty(f.ProjectName) && String.IsNullOrEmpty(f.FolderName)).Count() > 0;
        if (hasDefaultItems == false)
        {
            ProjectSyncPart(templateProjectItem, new List<OutputFile>());
        }
    }

    private static void ProjectSyncPart(ProjectItem templateProjectItem, IEnumerable<OutputFile> keepFileNames)
    {
        var keepFileNameSet = new HashSet<OutputFile>(keepFileNames);
        var projectFiles = new Dictionary<string, ProjectItem>();
        var originalOutput = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]);

        foreach (ProjectItem projectItem in templateProjectItem.ProjectItems)
        {
            projectFiles.Add(projectItem.FileNames[0], projectItem);
        }

        // Remove unused items from the project
        foreach (var pair in projectFiles)
        {
            var isNotFound = keepFileNames.Count(f => f.FileName == pair.Key) == 0;
            if (isNotFound == true
                && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalOutput + "."))
            {
                pair.Value.Delete();
            }
        }

        // Add missing files to the project
        foreach (var fileName in keepFileNameSet)
        {
            if (!projectFiles.ContainsKey(fileName.FileName))
            {
                templateProjectItem.ProjectItems.AddFromFile(fileName.FileName);
            }
        }
    }

    private void CheckoutFileIfRequired(string fileName)
    {
        if (this.dte.SourceControl == null
            || !this.dte.SourceControl.IsItemUnderSCC(fileName)
                ||
                this.dte.SourceControl.IsItemCheckedOut(fileName))
        {
            return;
        }

        // run on worker thread to prevent T4 calling back into VS
        this.checkOutAction.EndInvoke(this.checkOutAction.BeginInvoke(fileName, null, null));
    }
}

/// <summary>
/// Responsible creating an instance that can be passed
/// to helper classes that need to access the TextTransformation
/// members.  It accesses member by name and signature rather than
/// by type.  This is necessary when the
/// template is being used in Preprocessed mode
/// and there is no common known type that can be
/// passed instead
/// </summary>
public class DynamicTextTransformation2
{
    private readonly object instance;
    IDynamicHost2 dynamicHost;

    private readonly MethodInfo write;
    private readonly MethodInfo writeLine;
    private readonly PropertyInfo generationEnvironment;
    private readonly PropertyInfo errors;
    private readonly PropertyInfo host;

    /// <summary>
    /// Creates an instance of the DynamicTextTransformation class around the passed in
    /// TextTransformation shaped instance passed in, or if the passed in instance
    /// already is a DynamicTextTransformation, it casts it and sends it back.
    /// </summary>
    public static DynamicTextTransformation2 Create(object instance)
    {
        if (instance == null)
        {
            throw new ArgumentNullException("instance");
        }

        var textTransformation = instance as DynamicTextTransformation2;
        if (textTransformation != null)
        {
            return textTransformation;
        }

        return new DynamicTextTransformation2(instance);
    }

    private DynamicTextTransformation2(object instance)
    {
        this.instance = instance;
        var type = this.instance.GetType();
        this.write = type.GetMethod("Write", new Type[] { typeof(string) });
        this.writeLine = type.GetMethod("WriteLine", new Type[] { typeof(string) });
        this.generationEnvironment = type.GetProperty("GenerationEnvironment", BindingFlags.Instance | BindingFlags.NonPublic);
        this.host = type.GetProperty("Host");
        this.errors = type.GetProperty("Errors");
    }

    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's GenerationEnvironment property
    /// </summary>
    public StringBuilder GenerationEnvironment { get { return (StringBuilder) this.generationEnvironment.GetValue(this.instance, null); } }

    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's Errors property
    /// </summary>
    public System.CodeDom.Compiler.CompilerErrorCollection Errors { get { return (System.CodeDom.Compiler.CompilerErrorCollection) this.errors.GetValue(this.instance, null); } }

    /// <summary>
    /// Calls the wrapped TextTranformation instance's Write method.
    /// </summary>
    public void Write(string text)
    {
        this.write.Invoke(this.instance, new object[] { text });
    }

    /// <summary>
    /// Calls the wrapped TextTranformation instance's WriteLine method.
    /// </summary>
    public void WriteLine(string text)
    {
        this.writeLine.Invoke(this.instance, new object[] { text });
    }

    /// <summary>
    /// Gets the value of the wrapped TextTranformation instance's Host property
    /// if available (shows up when hostspecific is set to true in the template directive) and returns
    /// the appropriate implementation of IDynamicHost
    /// </summary>
    public IDynamicHost2 Host
    {
        get
        {
            if (this.dynamicHost == null)
            {
                if(this.host == null)
                {
                    this.dynamicHost = new NullHost2();
                }
                else
                {
                    this.dynamicHost = new DynamicHost2(this.host.GetValue(this.instance, null));
                }
            }
            return this.dynamicHost;
        }
    }
}

/// <summary>
/// Responsible for abstracting the use of Host between times
/// when it is available and not
/// </summary>
public interface IDynamicHost2
{
    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// </summary>
    string ResolveParameterValue(string id, string name, string otherName);

    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// </summary>
    string ResolvePath(string path);

    /// <summary>
    /// An abstracted call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// </summary>
    string TemplateFile { get; }

    /// <summary>
    /// Returns the Host instance cast as an IServiceProvider
    /// </summary>
    IServiceProvider AsIServiceProvider();
}

/// <summary>
/// Responsible for implementing the IDynamicHost as a dynamic
/// shape wrapper over the Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost interface
/// rather than type dependent wrapper.  We don't use the
/// interface type so that the code can be run in preprocessed mode
/// on a .net framework only installed machine.
/// </summary>
public class DynamicHost2 : IDynamicHost2
{
    private readonly object instance;
    private readonly MethodInfo resolveParameterValue;
    private readonly MethodInfo resolvePath;
    private readonly PropertyInfo templateFile;

    /// <summary>
    /// Creates an instance of the DynamicHost class around the passed in
    /// Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost shaped instance passed in.
    /// </summary>
    public DynamicHost2(object instance)
    {
        this.instance = instance;
        var type = this.instance.GetType();
        this.resolveParameterValue = type.GetMethod("ResolveParameterValue", new Type[] { typeof(string), typeof(string), typeof(string) });
        this.resolvePath = type.GetMethod("ResolvePath", new Type[] { typeof(string) });
        this.templateFile = type.GetProperty("TemplateFile");

    }

    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// </summary>
    public string ResolveParameterValue(string id, string name, string otherName)
    {
        return (string) this.resolveParameterValue.Invoke(this.instance, new object[] { id, name, otherName });
    }

    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// </summary>
    public string ResolvePath(string path)
    {
        return (string) this.resolvePath.Invoke(this.instance, new object[] { path });
    }

    /// <summary>
    /// A call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// </summary>
    public string TemplateFile
    {
        get
        {
            return (string) this.templateFile.GetValue(this.instance, null);
        }
    }

    /// <summary>
    /// Returns the Host instance cast as an IServiceProvider
    /// </summary>
    public IServiceProvider AsIServiceProvider()
    {
        return this.instance as IServiceProvider;
    }
}

/// <summary>
/// Responsible for implementing the IDynamicHost when the
/// Host property is not available on the TextTemplating type. The Host
/// property only exists when the hostspecific attribute of the template
/// directive is set to true.
/// </summary>
public class NullHost2 : IDynamicHost2
{
    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolveParameterValue
    /// that simply retuns null.
    /// </summary>
    public string ResolveParameterValue(string id, string name, string otherName)
    {
        return null;
    }

    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost ResolvePath
    /// that simply retuns the path passed in.
    /// </summary>
    public string ResolvePath(string path)
    {
        return path;
    }

    /// <summary>
    /// An abstraction of the call to Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost TemplateFile
    /// that returns null.
    /// </summary>
    public string TemplateFile
    {
        get
        {
            return null;
        }
    }

    /// <summary>
    /// Returns null.
    /// </summary>
    public IServiceProvider AsIServiceProvider()
    {
        return null;
    }
}

public sealed class Block
{
    public String Name;
    public int Start, Length;
    public string ProjectName { get; set; }
    public string FolderName { get; set; }
    public FileProperties FileProperties { get; set; }
}

public class ParamTextTemplate
{
    private readonly string template;

    private ParamTextTemplate(ITextTemplatingEngineHost host, string templateName)
    {
        this.Host = host;
        var fullName = this.Host.ResolvePath(templateName);
        this.template = File.ReadAllText(fullName);
    }

    private ITextTemplatingEngineHost Host { get; set; }

    public static ParamTextTemplate Create(ITextTemplatingEngineHost host, string templateName)
    {
        return new ParamTextTemplate(host, templateName);
    }

    public static TextTemplatingSession GetSessionObject()
    {
        return new TextTemplatingSession();
    }

    public string TransformText(TextTemplatingSession session)
    {
        var sessionHost = (ITextTemplatingSessionHost) this.Host;
        sessionHost.Session = session;

        var engine = new Engine();
        return engine.ProcessTemplate(this.template, this.Host);
    }
}

public class VsHelper
{
    /// <summary>
    /// Execute Visual Studio commands against the project item.
    /// </summary>
    /// <param name="item">The current project item.</param>
    /// <param name="command">The vs command as string.</param>
    /// <returns>An error message if the command fails.</returns>
    public static string ExecuteVsCommand(DTE dte, ProjectItem item, params string[] command)
    {
        if (item == null)
        {
            throw new ArgumentNullException("item");
        }

        var error = String.Empty;

        try
        {
            var window = item.Open();
            window.Activate();

            foreach (var cmd in command)
            {
                if (String.IsNullOrWhiteSpace(cmd) == true)
                {
                    continue;
                }

                var dte2 = dte as EnvDTE80.DTE2;
                dte2.ExecuteCommand(cmd, String.Empty);
            }

            item.Save();
            window.Visible = false;
            // window.Close(); // Ends VS, but not the tab :(
        }
        catch (Exception ex)
        {
            error = String.Format("Error processing file {0} {1}", item.Name, ex.Message);
        }

        return error;
    }

    /// <summary>
    /// Sets a property value for the vs project item.
    /// </summary>
    public static void SetPropertyValue(ProjectItem item, string propertyName, object value)
    {
        var property = item.Properties.Item(propertyName);
        if (property == null)
        {
            throw new ArgumentException(String.Format("The property {0} was not found.", propertyName));
        }
        else
        {
            property.Value = value;
        }
    }

    public static IEnumerable<ProjectItem> GetOutputFilesAsProjectItems(DTE dte, IEnumerable<OutputFile> outputFiles)
    {
        var fileNames = (from o in outputFiles
                        select Path.GetFileName(o.FileName)).ToArray();

        return GetAllSolutionItems(dte).Where(f => fileNames.Contains(f.Name));
    }

    public static string GetOutputPath(DTE dte, Block block, string defaultPath)
    {
        if (String.IsNullOrEmpty(block.ProjectName) == true && String.IsNullOrEmpty(block.FolderName) == true)
        {
            return defaultPath;
        }

        Project prj = null;
        ProjectItem item = null;

        if (String.IsNullOrEmpty(block.ProjectName) == false)
        {
            prj = GetProject(dte, block.ProjectName);
        }

        if (String.IsNullOrEmpty(block.FolderName) == true && prj != null)
        {
            return Path.GetDirectoryName(prj.FullName);
        }
        else if (prj != null && String.IsNullOrEmpty(block.FolderName) == false)
        {
            item = FindFolderByName(prj.ProjectItems, block.FolderName);
        }
        else if (String.IsNullOrEmpty(block.FolderName) == false)
        {
            if (dte.ActiveDocument == null)
                throw new Exception(
                    "ActiveDocument is not available. Please run this template when any project file is open and active in VS.");
            item = FindFolderByName(dte.ActiveDocument.ProjectItem.ContainingProject.ProjectItems, block.FolderName);
        }

        if (item != null)
        {
            return GetProjectItemFullPath(item);
        }

        return defaultPath;
    }

    public static ProjectItem FindFolderByName(ProjectItems inItems, string withName)
    {
        var folders = withName.Split(new char[] {'.', '/', '\\'});

        if (folders.Length == 1)
        {
            var items = GetAllProjectItemsRecursive(inItems).Where(p => p.Name == withName);

            if (items.Count() == 1)
                return items.First();

            foreach (var r in items)
            {
                if (r.Collection.Parent is Project)
                    return r;
            }

            return items.First();
        }

        var startItemEnumerator = GetAllProjectItemsRecursive(inItems)
            .Where(p => p.Name == folders[0])
            .Cast<ProjectItem>()
            .GetEnumerator();
        ProjectItem item = null;
        var idx = 1;
        var joinedNames = string.Empty;
        while (startItemEnumerator.MoveNext() && item == null)
        {
            item = startItemEnumerator.Current;
            for (idx = 1; idx < folders.Length; idx++)
            {
                var subItems = item.ProjectItems.Cast<ProjectItem>();
                joinedNames = string.Join(", ", subItems.Select(i => i.Name));
                item = subItems.FirstOrDefault(i => i.Name == folders[idx]);
                if (item == null)
                    break;
            }
        }
        if (item == null)
            throw new ArgumentException(folders[idx] + " not found in path " + withName + " among " + joinedNames);

        return item;
    }

    public static string GetTemplatePlaceholderName(ProjectItem item)
    {
        return String.Format("{0}.txt4", Path.GetFileNameWithoutExtension(item.Name));
    }

    public static ProjectItem GetTemplateProjectItem(DTE dte, OutputFile file, ProjectItem defaultItem)
    {
        if (String.IsNullOrEmpty(file.ProjectName) == true && String.IsNullOrEmpty(file.FolderName) == true)
        {
            return defaultItem;
        }

        var templatePlaceholder = GetTemplatePlaceholderName(defaultItem);
        var itemPath = Path.GetDirectoryName(file.FileName); 
        var fullName = Path.Combine(itemPath, templatePlaceholder);
        Project prj = null;
        ProjectItem item = null;

        if (String.IsNullOrEmpty(file.ProjectName) == false)
        {
            prj = GetProject(dte, file.ProjectName);            
        }

        if (String.IsNullOrEmpty(file.FolderName) == true && prj != null)
        {
            return FindProjectItem(prj.ProjectItems, fullName, true);
        }
        else if (prj != null && String.IsNullOrEmpty(file.FolderName) == false)
        {
            item = GetAllProjectItemsRecursive(prj.ProjectItems).First(i => i.Name == file.FolderName);
        }
        else if (String.IsNullOrEmpty(file.FolderName) == false)
        {
            item = FindFolderByName(dte.ActiveDocument.ProjectItem.ContainingProject.ProjectItems, file.FolderName);
        }

        if (item != null)
        {
            return FindProjectItem(item.ProjectItems, fullName, true);
        }

        return defaultItem;
    }

    private static ProjectItem FindProjectItem(ProjectItems items, string fullName, bool canCreateIfNotExists)
    {
        var item = items.Cast<ProjectItem>()
                        .FirstOrDefault(i => i.Name == Path.GetFileName(fullName));
        if (item == null && canCreateIfNotExists)
        {
            File.CreateText(fullName);
            item = items.AddFromFile(fullName);
        }

        return item;
    }

    public static Project GetProject(DTE dte, string projectName)
    {
        return GetAllProjects(dte).First(p => p.Name == projectName);
    }

    public static IEnumerable<Project> GetAllProjects(DTE dte)
    {
        var projectList = new List<Project>();

        var folders = dte.Solution.Projects.Cast<Project>()
                                           .Where(p=>p.Kind == EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder);

        foreach (var folder in folders)
        {
            if (folder.ProjectItems == null)
            {
                continue;
            }

            foreach (ProjectItem item in folder.ProjectItems)
            {
                var project = item.Object as Project;
                if (project != null)
                {
                    projectList.Add(project);
                }
            }
        }

        var projects = dte.Solution.Projects.Cast<Project>().Where(p=>p.Kind != EnvDTE80.ProjectKinds.vsProjectKindSolutionFolder);

        if (projects.Any())
            projectList.AddRange(projects);

        return projectList;
    }

    public static ProjectItem GetProjectItemWithName(ProjectItems items, string itemName)
    {
        return GetAllProjectItemsRecursive(items).First(i => i.Name == itemName);
    }

    public static string GetProjectItemFullPath(ProjectItem item)
    {
        if (item == null)
            return null;

        if (item.Properties == null)
            return null;

        return item.Properties.Item("FullPath").Value.ToString();
    }

    public static IEnumerable<ProjectItem> GetAllSolutionItems(DTE dte)
    {
        var itemList = new List<ProjectItem>();

        foreach (var item in GetAllProjects(dte))
        {
            if (item == null ||
                item.ProjectItems == null)
            {
                continue;
            }

            itemList.AddRange(GetAllProjectItemsRecursive(item.ProjectItems));
        }

        return itemList;
    }

    public static IEnumerable<ProjectItem> GetAllProjectItemsRecursive(ProjectItems projectItems)
    {
        foreach (ProjectItem projectItem in projectItems)
        {
            if (projectItem.ProjectItems == null) continue;

            foreach (var subItem in GetAllProjectItemsRecursive(projectItem.ProjectItems))
            {
                yield return subItem;
            }

            yield return projectItem;
        }
    }
}

public sealed class OutputFile
{
    public OutputFile()
    {
        this.FileProperties = new FileProperties
        {
            CustomTool = String.Empty,
            BuildAction = BuildAction.None
        };
    }

    public string FileName { get; set; }
    public string ProjectName { get; set; }
    public string FolderName { get; set; }
    public string Content { get; set; }
    public FileProperties FileProperties { get; set; }
}

public class BuildAction
{
    public const string None = "None";
    public const string Compile = "Compile";
    public const string Content = "Content";
    public const string EmbeddedResource = "EmbeddedResource";
    public const string EntityDeploy = "EntityDeploy";
}

public sealed class FileProperties
{
    public FileProperties ()
    {
        this.TemplateParameter = new Dictionary<string,string>();
    }

    public string CustomTool { get; set; }
    public string BuildAction { get; set; }
    public Dictionary<string, string> TemplateParameter { get; set; }

    internal string BuildActionString
    {
        get
        {
            return this.BuildAction;
        }
    }
}
#>